/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 15;       /* snap pixel */
static const unsigned int gappih    = 6;       /* horiz inner gap between windows */
static const unsigned int gappiv    = 6;       /* vert inner gap between windows */
static const unsigned int gappoh    = 6;       /* horiz outer gap between windows and screen edge */
static const unsigned int gappov    = 6;       /* vert outer gap between windows and screen edge */
static       int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const char *fonts[]          = { "Hack:pixelsize=13:antialias=true:autohint=true" , "FontAwesome:size=10" };
static const char dmenufont[]       = "monospace:size=10";


static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#005577";
static const char col_urgborder[]   = "#ff0000";


//static const char *colors[][3]      = {
//	/*               fg         bg         border   */
//
//
//	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
///	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
//	[SchemeUrg]  = { col_gray4, col_cyan,  col_urgborder  },
//};



// importing colorscheme from pywal
#include "/home/light/.cache/wal/colors-wal-dwm.h"



/* tagging */
static const char *tags[] = { "", "", "", "", "", "", "", "", "" };
//////static const char *tags[] = { "", "", "", "", "", "", "", "", "" };
//////static const char *tags[] = { "", "", "", "", "", "", "", "", "" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class                 instance    title       tags mask     isfloating   monitor */
///	{ "Gimp",                 NULL,       NULL,       1 << 6,       1,           -1 },
	{ "firefox",              NULL,       NULL,       1 << 1,       0,           -1 },
	{ "Brave-browser",        NULL,       NULL,       1 << 2,       0,           -1 },
	{ "zoom",                 NULL,       NULL,       1 << 3,       0,           -1 },
////	{ "code-oss",             NULL,       NULL,       1 << 8,       0,           -1 },
	{ "SimpleScreenRecorder", NULL,       NULL,       1 << 7,       1,           -1 },
////	{ "libreoffice",          NULL,       NULL,       1 << 4,       0,           -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

#define FORCE_VSPLIT 1  /* nrowgrid layout: force two clients to always split vertically */
#include "vanitygaps.c"
#include "shiftview.c"

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "|M|",      centeredmaster },
	{ ">M>",      centeredfloatingmaster },
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
	{ NULL,       NULL },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *termcmd[]  = { "st", NULL };
static const char scratchpadname[] = "scratchpad";
static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "120x32", NULL };
 

#include "movestack.c"
static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_d,      spawn,          SHCMD("dmenu_run") },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY|Mod1Mask,              XK_Return,  togglescratch,  {.v = scratchpadcmd } },
//	{ MODKEY,                       XK_grave,  togglescratch,  {.v = scratchpadcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
//	{ MODKEY,                       XK_Right,  focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_l,      focusstack,     {.i = +1 } },	//
//	{ MODKEY,                       XK_Left,   focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_h,      focusstack,     {.i = -1 } },	//
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_p,      incnmaster,     {.i = -1 } },
//	{ MODKEY,                       XK_Down,   setmfact,       {.f = -0.05} },
//	{ MODKEY,                       XK_Up,     setmfact,       {.f = +0.05} },
//	{ MODKEY|ShiftMask,             XK_Down,   setcfact,       {.f = +0.25} },
//	{ MODKEY|ShiftMask,             XK_Up,     setcfact,       {.f = -0.25} },
	{ MODKEY,                       XK_j,     setmfact,       {.f = -0.05} },	//
	{ MODKEY,                       XK_k,     setmfact,       {.f = +0.05} },	//
	{ MODKEY|ShiftMask,             XK_j,     setcfact,       {.f = +0.25} },	//
	{ MODKEY|ShiftMask,             XK_k,     setcfact,       {.f = -0.25} },	//



	{ MODKEY|ShiftMask,             XK_o,      setcfact,       {.f =  0.00} },
	{ MODKEY|ShiftMask,             XK_l, 	   movestack,      {.i = +1 } },	//
//	{ MODKEY|ShiftMask,             XK_Right,  movestack,      {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_h,  	   movestack,      {.i = -1 } },	//
//	{ MODKEY|ShiftMask,             XK_Left,   movestack,      {.i = -1 } },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY|Mod1Mask,              XK_equal,  incrgaps,       {.i = +1 } },
	{ MODKEY|Mod1Mask,              XK_minus,  incrgaps,       {.i = -1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_equal,  incrogaps,      {.i = +1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_minus,  incrogaps,      {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_0,      togglegaps,     {0} },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_0,      defaultgaps,    {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_q,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY|ShiftMask,             XK_t,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY|ShiftMask,             XK_f,      setlayout,      {.v = &layouts[3]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[4]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY|ShiftMask,             XK_n,      togglefullscr,  {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	///////////////////////////////////////////////////////////////////////////////////////////
	//// shiftview implementation
	
	{ MODKEY,                       XK_semicolon,		 	shiftview,       {.i = -1 } },
	{ MODKEY,                       XK_apostrophe,		 	shiftview,       {.i = +1 } },

	///////////////////////////////////////////////////////////////////////////////////////////
	//// spamming shell commands 
	// redshif
	
	{ MODKEY,                      XK_x,      spawn,	   SHCMD("redshift -x") },
	{ MODKEY,                      XK_c,      spawn,          SHCMD("redshift -P -O 2500") },
	// mpv
	
	///{ MODKEY|ShiftMask,            XK_m,      spawn,          SHCMD("mpv $(xclip -selection c -o)") },
	

	// ncmpcpp
	
	{ MODKEY,                      XK_n,      spawn,          SHCMD("st -e ncmpcpp") },
	
	//
	

	// Audio control
	//
	
	{ MODKEY|ShiftMask,            XK_minus,  spawn,          SHCMD("$HOME/.scripts/volctrl d") },
	{ MODKEY|ShiftMask,            XK_equal,  spawn,          SHCMD("$HOME/.scripts/volctrl i") },

	// ranger
	
	{ MODKEY|ShiftMask,            XK_d,       spawn,         SHCMD("st -e ranger") },

	// screenlock

	{ MODKEY|Mod1Mask,             XK_v,       spawn,         SHCMD("slock") },

	// theme changer

	//	{ MODKEY|Mod1Mask,             XK_g,       spawn,         SHCMD("st -e bash ~/.scripts/themechanger.sh") },
	{ MODKEY|Mod1Mask,             XK_g,       spawn,         SHCMD("sxiv -b -t $HOME/Pictures") },
	
	// brightness
	{ MODKEY,	              XK_minus,	  spawn,          SHCMD("sh $HOME/.scripts/brightness dec") },
	{ MODKEY,      		      XK_equal,	  spawn,          SHCMD("sh $HOME/.scripts/brightness inc") },

	// xkill , for when i need it
	
	{ MODKEY|Mod1Mask|ShiftMask,   XK_k,        spawn,         SHCMD("xkill") },
	// quality of life scripts
	
	{  MODKEY,	               XK_a,        spawn,         SHCMD("bash /home/light/.qolscripts/lsqol.sh") },
	
	// for searching 
	
	{ MODKEY|ShiftMask,            XK_s,        spawn,         SHCMD("bash /home/light/.qolscripts/locater.sh") },

	// Screenshot

	{ MODKEY,                      XK_w,      spawn,          SHCMD("import /home/light/Desktop/screenshots/$(date | awk '{print $1$4$7$2$3 }').png") },

	////////////////////////////////////////////////////////////////////////////////////////////
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_c,      quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

